package fnplot.syntax;

import java_cup.runtime.*;
import java.io.*;
import java.util.*;
import fnplot.sys.SyntaxFnPlotException;
import fnplot.values.FnPlotValue;

/* Preliminaries to set up and use the scanner.  */
parser code {:
		FnPlotLexer lexer;

		public FnPlotParser(FnPlotLexer l) {
		    // As of CUP v0.11, need to pass Lexer to superclass
		    super(l);
		    lexer = l;
		}

		public void report_error(String message, Object info) {
		    System.err.println(message);
		}

		public void syntax_error(Symbol cur_token) {
		    System.err.print("Line " + lexer.getLine() +
				     " near char " + lexer.getChar() + ": ");
		    report_error("Syntax error", cur_token);
		    System.err.println ("Last token read is " +
					 lexer.getText());
		}
	    :};

init with {:
	  :};

scan with {:
		try {
		    return lexer.next_token();
		} catch (java.io.IOException ioe) {
                    String msg = "Line " + lexer.getLine() + ", pos " +
				       lexer.getColumn() +
				       ": Unrecognised token <" +
				       lexer.getText() + ">";
		    throw new SyntaxFnPlotException(msg, ioe);
		}
	  :};

/* Terminals (tokens returned by the scanner). */

// special symbols
terminal LPAREN, RPAREN, LSQUARE, RSQUARE, COLON;
terminal FUN, MAPSTO, PLOT, FOR, CLEAR;

// arithmetic operators
terminal PLUS, MINUS, MUL, DIV, MOD, ASSIGN, POW;
terminal LET, IN, LBRACE, RBRACE, COMMA;
terminal SEMI;

// terminals with values
terminal Integer INTEGER;
terminal String VARIABLE;
terminal Double FLOAT;

/* Non terminals */
non terminal ArithProgram program;
non terminal StmtSequence stmtList;
non terminal Statement stmt;
non terminal StmtDefinition definition;

non terminal StmtLet letExp;
non terminal ArrayList<Binding> bindings;
non terminal ArrayList<Binding> bindingsAux;
non terminal Binding binding;

non terminal Exp expression;
non terminal Exp arithExp;
non terminal Exp term;
non terminal Exp factor;
non terminal Exp power;
non terminal Exp funDefn;
non terminal Exp funCall;
non terminal Exp plotStmt;
non terminal Exp clearStmt;
non terminal ArrayList<String> paramListE;
non terminal ArrayList<String> paramList;
non terminal ArrayList<Exp> expListE; 
non terminal ArrayList<Exp> expList;
non terminal FnPlotValue<?> number;
non terminal empty;

/* Grammar rules */

program ::= stmtList:s {: RESULT = new ArithProgram(s); :};

stmtList ::= stmtList:lst stmt:s {:
		lst.add(s); 
		RESULT = lst;
		:} |
	     stmt:s {:
		RESULT = new StmtSequence(s);
		:};

stmt ::= definition:d {: RESULT = d; :} |
	 expression:e SEMI {: RESULT = e; :} |
	 plotStmt: ps SEMI {: RESULT = ps; :} |
	 clearStmt: cls SEMI {: RESULT = cls; :};

expression ::=  letExp:l {: RESULT = l; :} |
		LBRACE stmtList:body RBRACE {: RESULT = body; :} |
		arithExp:a {: RESULT = a; :} |
		funDefn: fun {: RESULT = fun; :};

letExp ::= LET bindings:bs IN expression:body {:
			RESULT = new StmtLet(bs, body);
           :};

binding ::= VARIABLE:v ASSIGN expression:e {:
		RESULT = new Binding(v, e);
	    :};

bindings ::= binding:b bindingsAux:bl {:
		bl.add(0,b);
		RESULT = bl;
	     :} |
		empty {: RESULT = new ArrayList(); :};

bindingsAux ::= COMMA binding:b bindingsAux:bl {:
		  bl.add(0,b);
		  RESULT = bl;
		:} |
		empty {: RESULT = new ArrayList(); :};

definition ::= VARIABLE:v ASSIGN expression:e SEMI {:RESULT = new StmtDefinition(v, e);:};


funDefn ::= FUN LPAREN paramListE: pl RPAREN MAPSTO expression: body {: RESULT = new ExpFunction(pl, body); :};

paramListE ::= paramList: pl {: RESULT = pl; :} | empty {: RESULT = new ArrayList(); :};

paramList ::= paramList: pl COMMA VARIABLE: v {: pl.add(v); RESULT = pl; :} |
				VARIABLE: v {: ArrayList<String> lst = new ArrayList<>(); lst.add(v); RESULT = lst; :};

funCall ::= factor: f LPAREN expListE: el RPAREN {: RESULT = new ExpFunctionCall(f, el); :};

expListE ::= expList: el {: RESULT = el; :} | empty {: RESULT = new ArrayList(); :};

expList ::= expList: el COMMA expression: e {: el.add(e); RESULT = el; :} |
			expression: e {: ArrayList<Exp> lst = new ArrayList<>(); lst.add(e); RESULT = lst; :};

plotStmt ::= PLOT expression: ex FOR VARIABLE: v IN LSQUARE number: start COLON number: end RSQUARE {:
				RESULT = new ExpPlot(ex, v, start, end); :};

arithExp ::= 	arithExp:e PLUS term:t {:
			RESULT = new ExpAdd(e, t); :} |
		arithExp:e MINUS term:t {:
			RESULT = new ExpSub(e, t); :} |
		term:t {: RESULT = t; :};

term ::= term:t MUL power:p {:
		RESULT = new ExpMul(t, p); :} |
	 term:t DIV power:p {:
		RESULT = new ExpDiv(t, p); :} |
	 term:t MOD power:p {:
		RESULT = new ExpMod(t, p); :} |
	 power:p {: RESULT = p; :};

number ::= INTEGER:ilit {: RESULT = FnPlotValue.make(ilit); :} |
			MINUS INTEGER: ilit {: RESULT = FnPlotValue.make(ilit * -1); :} |
			FLOAT:ilit {: RESULT = FnPlotValue.make(ilit); :} |
			MINUS FLOAT: ilit {: RESULT = FnPlotValue.make(ilit * -1); :};


power ::= power: p POW factor: f {: RESULT = new ExpPow(p, f); :} |
			factor: f {: RESULT = f; :};

factor ::= number:n {: RESULT = new ExpLit(n); :} |
	   VARIABLE:var {: RESULT = new ExpVar(var); :} |
	   funCall: call {: RESULT = call; :} |
	   LPAREN expression:e RPAREN {: RESULT = e; :}	;

clearStmt ::= CLEAR LPAREN RPAREN {: RESULT = new PlotCls(); :};

empty ::= ;
